{"version":3,"sources":["Books.js","SearchText.js","App.js","serviceWorker.js","index.js"],"names":["Component","SearchText","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","pictures","showDetails","updateState","bind","assertThisInitialized","onClickSearch","showDescription","item","e","preventDefault","setState","_this2","targetValue","fetch","then","results","json","console","log","items","map","react_default","a","createElement","key","etag","width","height","src","volumeInfo","imageLinks","thumbnail","alt","href","onClick","title","authors","target","value","type","onChange","id","subtitle","pageCount","averageRating","description","React","App","src_SearchText","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10691422.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Books extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bookDetail: [],\r\n        };\r\n    }\r\n    componentWillMount() {\r\n        let search = this.props.search;\r\n        search = \"Jx1ojwEACAAJ\";\r\n        // alert(search);\r\n        // https://books.google.co.in/books?id=Aaug_RnI-xQC\r\n        if (search) {\r\n            fetch(\"https://www.googleapis.com/books/v1/volumes?q=\" + search)\r\n                .then(results => {\r\n                    return results.json();\r\n                }).then(data => {\r\n                    console.log(\"data\", data)\r\n                    let bookDetail = data.items.map((item) => {\r\n                        return (\r\n                            <div>\r\n                                <div key={item.id}>\r\n                                    {item.volumeInfo.title}\r\n                                </div>\r\n                                <div>\r\n                                    <span >{item.volumeInfo.title}</span>\r\n                                    <span >{item.volumeInfo.subtitle}</span>\r\n                                </div>\r\n                                <div><img width=\"250px\" height=\"auto\" src={item.volumeInfo.imageLinks.thumbnail} alt=\"\" /></div>\r\n                                <div>{item.volumeInfo.authors} <span>:{item.volumeInfo.pageCount}</span></div>\r\n                                <div>{item.volumeInfo.averageRating}</div>\r\n                                <div>{item.volumeInfo.description}</div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                    this.setState({ bookDetail: bookDetail });\r\n                    console.log(\"state\", this.state.bookDetail)\r\n                })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {this.state.bookDetail}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Books;","import React from 'react';\r\n// import Books from './Books.js';\r\nclass SearchText extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: 'emotional intelligence',\r\n            pictures: [],\r\n            showDetails: false,\r\n        }\r\n        this.updateState = this.updateState.bind(this);\r\n        this.onClickSearch = this.onClickSearch.bind(this);\r\n        this.showDescription = this.showDescription.bind(this);\r\n    };\r\n    showDescription(item, e) {\r\n        e.preventDefault();\r\n        this.setState({ showDetails: true, item: item });\r\n    }\r\n    onClickSearch(e) {\r\n        let targetValue = this.state.data;\r\n        let search = targetValue;\r\n        //  alert(search);\r\n        if (search) {\r\n            fetch(\"https://www.googleapis.com/books/v1/volumes?q=\" + search)\r\n                .then(results => {\r\n                    return results.json();\r\n                }).then(data => {\r\n                    console.log(\"data\", data)\r\n                    if (data) {\r\n                        let pictures = data.items.map((item) => {\r\n                            return (\r\n                                <div key={item.etag}>\r\n                                    <img width=\"25px\" height=\"auto\" src={item.volumeInfo.imageLinks.thumbnail} alt=\"\" />\r\n                                    <a href=\"#\" onClick={this.showDescription.bind(this, item.volumeInfo)}>{item.volumeInfo.title}</a>,\r\n                                    by:{item.volumeInfo.authors}\r\n                                </div>\r\n                            )\r\n                        })\r\n                        this.setState({ pictures: pictures });\r\n                        console.log(\"state\", this.state.pictures)\r\n                    }\r\n                    else {\r\n                        this.setState({ pictures: [] });\r\n                        console.log(\"state\", this.state.pictures)\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            this.setState({ pictures: [] });\r\n            console.log(\"state\", this.state.pictures)\r\n        }\r\n    }\r\n    updateState(e) {\r\n        this.setState({ data: e.target.value });\r\n        // let targetValue = e.target.value;\r\n        // let search = targetValue;\r\n        // //  alert(search);\r\n        // if (search) {\r\n        //     fetch(\"https://www.googleapis.com/books/v1/volumes?q=\" + search)\r\n        //         .then(results => {\r\n        //             return results.json();\r\n        //         }).then(data => {\r\n        //             console.log(\"data\", data)\r\n        //             if (data) {\r\n        //                 let pictures = data.items.map((item) => {\r\n        //                     return (\r\n        //                         <div key={item.etag}>\r\n        //                             <a href=\"\">{item.volumeInfo.title}\r\n        //                             By : {item.volumeInfo.authors}</a>\r\n        //                         </div>\r\n        //                     )\r\n        //                 })\r\n        //                 this.setState({ pictures: pictures });\r\n        //                 console.log(\"state\", this.state.pictures)\r\n        //             }\r\n        //             else {\r\n        //                 this.setState({ pictures: [] });\r\n        //                 console.log(\"state\", this.state.pictures)\r\n        //             }\r\n        //         })\r\n        // }\r\n        // else {\r\n        //     this.setState({ pictures: [] });\r\n        //     console.log(\"state\", this.state.pictures)\r\n        // }\r\n    }\r\n    render() {\r\n        let item = this.state.item;\r\n        return (\r\n            <div>\r\n                <input type=\"text\" value={this.state.data}\r\n                    onChange={this.updateState} />\r\n                <button onClick={this.onClickSearch}>Search</button>\r\n                <h4>\r\n                    {this.state.pictures}\r\n                </h4>\r\n                {this.state.showDetails &&\r\n                    <h2>\r\n                        <div>\r\n                            <div key={item.id}>\r\n                                {item.title}\r\n                            </div>\r\n                            <div>\r\n                                <span >:{item.subtitle}</span>\r\n                            </div>\r\n                            <div><img width=\"250px\" height=\"auto\" src={item.imageLinks.thumbnail} alt=\"\" /></div>\r\n                            <div>{item.authors} <span>:{item.pageCount}</span></div>\r\n                            <div>{item.averageRating}</div>\r\n                            <div>{item.description}</div>\r\n                        </div>                    </h2>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SearchText;","import React, { Component } from 'react';\nimport Books from './Books.js';\nimport SearchText from './SearchText.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <SearchText />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}