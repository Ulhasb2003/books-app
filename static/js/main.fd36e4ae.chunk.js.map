{"version":3,"sources":["SearchText.js","App.js","serviceWorker.js","index.js"],"names":["SearchText","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","books","showDetails","updateState","bind","assertThisInitialized","onClickSearch","showDescription","item","e","preventDefault","setState","_this2","targetValue","fetch","then","results","json","thumbnail","items","map","volumeInfo","imageLinks","react_default","a","createElement","key","etag","width","height","src","alt","href","onClick","title","authors","console","log","target","value","className","type","onChange","placeholder","id","subtitle","pageCount","averageRating","SearchText_ReadMore","description","React","Component","ReadMore","_this3","more","setMore","slice","App","src_SearchText","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd36e4ae.chunk.js","sourcesContent":["import React from 'react';\r\nclass SearchText extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: 'javascript', //initial data\r\n            books: [],\r\n            showDetails: false,\r\n        }\r\n        this.updateState = this.updateState.bind(this);\r\n        this.onClickSearch = this.onClickSearch.bind(this);\r\n        this.showDescription = this.showDescription.bind(this);\r\n    };\r\n    showDescription(item, e) {\r\n        // clicking book link it display book details at right side\r\n        e.preventDefault();\r\n        this.setState({ showDetails: true, item: item });\r\n    }\r\n    onClickSearch(e) {\r\n        // To search a book in google api and store data in book state.\r\n        let targetValue = this.state.data;\r\n        let search = targetValue;\r\n        if (search) {\r\n            fetch(\"https://www.googleapis.com/books/v1/volumes?q=\" + search)\r\n                .then(results => {\r\n                    return results.json();\r\n                }).then(data => {\r\n                    if (data) {\r\n                        let thumbnail = \"\";\r\n                        let books = data.items.map((item) => {\r\n                            if (item.volumeInfo.imageLinks) {\r\n                                thumbnail = item.volumeInfo.imageLinks.thumbnail\r\n                            }\r\n                            return (\r\n                                <div key={item.etag}>\r\n                                    <img width=\"15px\" height=\"auto\" src={thumbnail} alt=\"\" />\r\n                                    <a href=\"#\" onClick={this.showDescription.bind(this, item.volumeInfo)}>{item.volumeInfo.title}</a>,\r\n                                    by:{item.volumeInfo.authors}\r\n                                </div>\r\n                            )\r\n                        });\r\n                        this.setState({ books: books });\r\n                        console.log(\"state\", this.state.books);\r\n                    }\r\n                    else {\r\n                        this.setState({ books: [] });\r\n                        console.log(\"state\", this.state.books);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            this.setState({ books: [] });\r\n            console.log(\"state\", this.state.books);\r\n        }\r\n    }\r\n    updateState(e) {\r\n        // update textbox with entered value\r\n        this.setState({ data: e.target.value });\r\n    }\r\n    render() {\r\n        let item = this.state.item;\r\n        return (\r\n            <div>\r\n                <table className=\"center\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                Book Search:<input type=\"text\" value={this.state.data}\r\n                                    onChange={this.updateState} placeholder=\"search a book...\" />\r\n                                <button onClick={this.onClickSearch}>Search</button>\r\n                                <span>(Post search click a book link to see details...)</span>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <table>\r\n                    <col width=\"30%\" />\r\n                    <col width=\"70%\" />\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <h4>\r\n                                    {this.state.books}\r\n                                </h4>\r\n                            </td>\r\n                            {this.state.showDetails &&\r\n                                <td>\r\n                                    <h2>\r\n                                        <div>\r\n                                            <div key={item.id}>\r\n                                                Title:{item.title}\r\n                                            </div>\r\n                                            <div>\r\n                                                <span >Subtitle:{item.subtitle}</span>\r\n                                            </div>\r\n                                            <div><img width=\"100px\" height=\"auto\" src={item.imageLinks.thumbnail} alt=\"\" /></div>\r\n                                            <div>Author:{item.authors} <span>Pages:{item.pageCount}</span></div>\r\n                                            <div>Ratings:{item.averageRating}</div>\r\n                                            <div><ReadMore description={item.description} /></div>\r\n                                        </div>\r\n                                    </h2>\r\n                                </td>\r\n                            }\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nclass ReadMore extends React.Component {\r\n    // component to add read more feature.\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            more: false,\r\n        };\r\n        this.setMore = this.setMore.bind(this);\r\n    };\r\n    setMore(e) {\r\n        e.preventDefault();\r\n        this.setState((state) => ({\r\n            more: !state.more\r\n        }));\r\n    }\r\n    render() {\r\n        let description = this.props.description;\r\n        if (this.state.more) {\r\n            return (\r\n                <div>\r\n                    Description:{description} <a href=\"#\" onClick={this.setMore}>less...</a>\r\n                </div>\r\n            );\r\n        }\r\n        description = description?this.props.description.slice(0, 300):\"\";\r\n        return (\r\n            <div>\r\n                Description:{description} <a href=\"#\" onClick={this.setMore}>more...</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SearchText;","import React, { Component } from 'react';\nimport SearchText from './SearchText.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <SearchText />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}